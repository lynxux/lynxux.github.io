<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>工作 on Link Blog</title>
    <link>https://lynxux.github.io/tags/%E5%B7%A5%E4%BD%9C/</link>
    <description>Recent content in 工作 on Link Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lynxux.github.io/tags/%E5%B7%A5%E4%BD%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go 的包管理踩坑记录</title>
      <link>https://lynxux.github.io/archives/2022-07-26-go-lib-record/</link>
      <pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lynxux.github.io/archives/2022-07-26-go-lib-record/</guid>
      <description>对于现在学习goland的新手来说（比如我），最熟悉的包管理方式应该就是GO MODULE（mod模式）了，因为GO 1.11版本之后就开始默认使用GOMODULE了。
但是看过相关的文章大家都应该知道，在GO 1.5版本之前GO使用gopath进行包的管理，在GO 1.5之后又增加了vendor机制。
如果一点都不了解go的包管理的可以去Go包管理详解-知乎先看一下。
首先，GO mod模式会从import的地址上去查找对应的项目，然后把项目拉取到本地的gopath的pkg中。
问题 1 ：如果我们要暂时修改import包中的代码，要怎么办？
那我们可能直接修改gopath/pkg里的源码文件吗？
​	&amp;ndash; 答案是不可以，因为是只读的
我想GO官方是希望我们使用自己的fork的仓库进行修改，然后拉取再进行测试，但是这样的操作实在过于繁琐，所以此时我们可以使用go vendor
当我们使用go mod vender命令之后，会在项目的当前目录生成vendor文件，存放着我们所有需要的依赖文件。我们可以修改vendor文件里的源文件，然后进行测试。（当然这种方式并不推荐）
问题 2 ：如果老的项目不使用mod进行管理，那么我们要怎么办？
此时，一般项目中都会有vendor目录，如果没有也不要紧，此时都会从gopath的src目录下进行依赖的查找，所以推荐的方式时完全按照go path的方式去组织项目
就是把所有的项目全部按照import中文件夹的组织方式进行存放，此时一般都会从gopath的src种查找源文件，而且此时如果需要修改引用的包中的源代码也是可以直接修改的。
但是如果项目有vendor目录，会先查找vendor，如果找不到再从go path的src下查找。
此时不要忘了把 GO111MODULE 设置为 off 或者空（为空要保证项目目录下没有mod文件）
问题3：为什么goland中无法查找go path下的包？
大概率是因为goland是默认开启GOMODULE集成的，即使你在terminal中关闭了GOMODULE，goland还是会使用mod模式。我们需要在Go/Go Modules设置中关闭Enable Go modules intergation
参考：
【1】Go包管理详解-知乎</description>
    </item>
    
    <item>
      <title>2022年任务清单</title>
      <link>https://lynxux.github.io/archives/2022-04-03-flags-in-2022/</link>
      <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lynxux.github.io/archives/2022-04-03-flags-in-2022/</guid>
      <description> 想到了就去做吧！
关于工作 1. Leetcode刷到700题 截止04.03，已刷320题 截止04.13，已刷331题（本月由于部分题2刷，可能进度稍慢） 2. MIT 6.824 (分布式系统) 预计5月前完成（lab1， lab2） 截止04.04，完成lab1 截止04.13，完成lab2A 截止04.15，完成lab2B 截止04.17，完成lab2C 截止04.20，完成lab2D 截止04.24，完成所有（lecture + lab1，2） 3. MIT 6.s081 或者 Tsinghua rcore (操作系统) 7月前完成 4. Stanford CS144 或者 gev/evio 开源项目 (计算机网络) 9月前完成 5. rosedb 或者 CMU 15-445 或者 MIT 6.830 (数据库) 12月前完成 关于学习 1. 中期报告 2. 毕业论文 关于生活 1. 运动 学校解封之后，还是要继续健身啊！希望能看到腹肌！ 2. 待补充 </description>
    </item>
    
    <item>
      <title>二十四岁</title>
      <link>https://lynxux.github.io/archives/2022-03-01-age24/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lynxux.github.io/archives/2022-03-01-age24/</guid>
      <description>这篇本应该写在二月六日的文章，却被拖到了三月
事记 这一年，回想到底做了哪些事情，我可能也回想不起多少
这一年结束了学生时代的所有考试（应该？），经历第一次的项目结题和第一次做了手术。似乎就没有什么其他很重大的事情了。
1. 结束了学生时代的所有考试
我本科大四的生活好像发出过一次这样的感慨，没想到后来又读了研究生。这次发出这样的感概应该不会有下次了把，毕竟自己没有读博的打算。为什么这件事情对我来说还挺重要的呢？可能是因为我实在是厌烦了应试教育。每次考试我都要花很长的时间复习，可是自己对这些知识似乎并没有完全掌握，囫囵吞枣式的复习完成之后能考一个还过的去的分数就可以了。这么多年下来，总感觉自己学了很多东西，但是又忘记了，好像一无所获，一事无成。
（最近准备面试的生活，又一次有了考试的感觉，可能还是因为自己还是什么都没有学习，又只能靠着临时抱佛脚把。。。
2. 经历了第一次的项目结题
算是第一次经历一次很大的事件，虽然这件事自己做的事情不多，但是毕竟是亲身经历，还是会觉得感触颇深。
首先就是验证了之前的想法，验收前再怎么焦虑，验收的时候就会发现这其实没什么。可是这样还是改变不了自己的心态，也许多经历几次就会好把。
其次，验收的时候真的很忙，也是自己第一次这么忙，从早上6点到晚上12点就一直在忙，中间连喘息的机会都没有。庆幸的是，自己也没觉得这有什么，算是又多了一次体验把。
3. 做了一个小手术
害，这个其实没什么好说的，只是因为是第一次做手术，感觉还是挺值得纪念的。也算是解决一件事情。
最近
开学以来，因为找工作，其实很忙。开学的两周里，除了做了一点老师的事情，其他的每天都在准备面经，到今天面经才基本上完成。然后今天晚上就经历了第一次面试，因为面试的岗位并不是我主动投递的，所以我也预料到了结果，但是表现的很差还是影响心情&amp;hellip;继续加油把！
其他 最近的面试使得自己有忙碌了起来，也使自己开始思考关于工作的很多事情。比如，我要找一份什么样的工作（我想要去哪一个公司的哪一个部门）等等。看起来，我总是想在当前的选择中找到一个最好的，但是最好的那个自己似乎也能力不足。我是不是有点太贪心了呢？正确的做法是不是先做，而不是考虑那么多？不知道，在思考下去好像变成了哲学问题。
在这个自己的本命年，我要找实习找工作并且毕业，看起来是很重要的一年，因为我要做出很多的选择，这些选择可能对以后影响深远。不过就是自己好像还没有能力去选择。
新的一年，希望自己不要总是对自己作出限制，不要想得太多，努力把！</description>
    </item>
    
    <item>
      <title>LeetCode刷题记录</title>
      <link>https://lynxux.github.io/archives/2021-12-14-leetcode-go-record/</link>
      <pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lynxux.github.io/archives/2021-12-14-leetcode-go-record/</guid>
      <description>更新 这次刷题按照【代码随想录】的章节顺序来刷的，预计会有接近200道题。
这个网站不仅提供的题目的分类，还提供了题目的不同的语言的解答，感觉还是很不错的！
由于博客不适合展示这么多的内容，所以请移步github-studynotes</description>
    </item>
    
  </channel>
</rss>
